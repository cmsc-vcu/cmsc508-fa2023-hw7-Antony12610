---
title: Homework 7 - Creating a resume database
author: Antony Fuentes
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---


The document is structured to present a database project's details and functionality using a combination of markdown text and Python code cells. It covers an overview of the project's aim, an explanation of an ER diagram, descriptions of database tables ('People,' 'Skills,' and 'Roles'), snapshots of table data, sample SQL queries, and their respective outputs. Overall, it efficiently combines explanations, code snippets, and query results to demonstrate the database's design, contents, and querying capabilities.


GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-Antony12610>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false
# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false
# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"
# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true
# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")
```

## Overview and description

This project centers on constructing a comprehensive database to consolidate the skills, certifications, and roles of company employees. It aims to streamline skill-based employee searches, track skill acquisition and anticipated dates, and facilitate role assignments. The database encompasses tables for skills/certifications, employees, and roles, fostering associations between skills and employees as well as employees and roles. It serves to identify skill sets, evaluate employee skills, and analyze skill gaps within specific roles, fostering efficient talent management and skill optimization within the company.

## Crows-foot diagram

(add a description of the diagram and what the reader is seeing.)

```{mermaid}
%%| echo: false
   erDiagram
    SKILLS ||--o{ PEOPLESKILLS : ""
    PEOPLE ||--o{ PEOPLESKILLS: ""
    PEOPLE ||--o{ PEOPLE_ROLES : ""
    ROLES ||--o{ PEOPLE_ROLES : ""
    
    SKILLS {
        int id
        varchar name
        varchar description
        varchar tag
        varchar url 
        int time_commitment
        primary key (id)
    }

    PEOPLE {
        id int
        first_name varchar(255)
        last_name varchar(255)
        email varchar(255)
        linkedin_url varchar(255)
        headshot_url varchar(255)
        discord_handle varchar(255)
        brief_bio varchar(255)
        date_joined date
        primary key (id)
    }

    PEOPLESKILLS {
        id int
        skills_id int
        people_id int
        date_acquired date
        primary key (id),
        foreign key (skills_id) references skills(id),
        foreign key (people_id) references people(id)
    }

    ROLES {
        id int
        name varchar(255)
        sort_priority int
        primary key (id)
    }

    PEOPLE_ROLES {
        id int
        people_id int
        role_id int
        date_role_acquired date
        primary key (id),
        foreign key (people_id) references people(id),
        foreign key (role_id) references roles(id)
    }

```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe ... 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe ... 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```
### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select * from people
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List people names and email addresses ordered by last_name

```{python}
#| echo: false
#| eval: true
sql = """
SELECT first_name, last_name, email
FROM people
ORDER BY last_name;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```
### List skill names of Person 1

```{python}
#| echo: false
#| eval: true
sql = """
SELECT s.name AS skill_name
FROM peopleskills ps
JOIN skills s ON ps.skills_id = s.skills_id
WHERE ps.people_id = 1;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6

```{python}
#| echo: false
#| eval: true
sql = """
SELECT p.first_name, p.last_name
FROM people p
JOIN peopleskills ps ON p.people_id = ps.people_id
WHERE ps.skills_id = 6;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true
sql = """
SELECT p.first_name, p.last_name
FROM people p
INNER JOIN peopleroles pr ON p.people_id = pr.people_id
INNER JOIN roles r ON pr.role_id = r.id
WHERE r.name = 'Developer';
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills

```{python}
#| echo: false
#| eval: true
sql = """
SELECT p.first_name, p.last_name, p.email
FROM people p
WHERE p.people_id NOT IN (SELECT DISTINCT people_id FROM peopleskills);
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills

```{python}
#| echo: false
#| eval: true
sql = """
SELECT name, tag
FROM skills
WHERE NOT EXISTS (
    SELECT 1
    FROM peopleskills ps
    WHERE ps.skills_id = skills.skills_id
);
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role

```{python}
#| echo: false
#| eval: true
sql = """
SELECT p.first_name, p.last_name, s.name
FROM people p
JOIN peopleroles pr ON p.people_id = pr.people_id
JOIN roles r ON pr.id = r.id AND r.name = 'Boss'
LEFT JOIN peopleskills ps ON p.people_id = ps.people_id
LEFT JOIN skills s ON ps.skills_id = s.skills_id;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles

```{python}
#| echo: false
#| eval: true
sql = """
SELECT id, name
FROM roles
WHERE NOT EXISTS (
    SELECT 1
    FROM peopleroles
    WHERE roles.id = peopleroles.id
);
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

This assignment really had me struggling. I really thought I had the concept and I felt like I was flying through it, but then I realized i was doing most things wrong which just leaad to a lot of confusion. I need to fix these issues, as I need to fully understand what to do for our semester project. 